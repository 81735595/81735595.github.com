<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Walking</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://brooch.me/"/>
  <updated>2016-12-02T08:52:47.000Z</updated>
  <id>http://brooch.me/</id>
  
  <author>
    <name>投身烈火</name>
    <email>81735595@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MobX入坑指南(2)</title>
    <link href="http://brooch.me/2016/11/29/MobX-simple-entry-2/"/>
    <id>http://brooch.me/2016/11/29/MobX-simple-entry-2/</id>
    <published>2016-11-29T12:40:50.000Z</published>
    <updated>2016-12-02T08:52:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2016/11/29/MobX-simple-entry-2/">上一篇</a>简单介绍了下mobx常用的几个api(observable、computed、autorun)，以及mobx-react的api(observer)。这次说说action。</p>
<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p>用法：</p>
<ul>
<li>action(fn)</li>
<li>action(name, fn)</li>
<li>@action classMethod</li>
<li>@action(name) classMethod</li>
<li>@action boundClassMethod = (args) =&gt; { body }</li>
<li>@action(name) boundClassMethod = (args) =&gt; { body }</li>
</ul>
<p>之前的例子里使用了回调的方式来触发响应，mobx其实也支持使用flux的方式来出发响应，并且在2.2版本提供了action的功能。</p>
<p>action是一个工厂函数，可以接受name和fn两个参数，name是String，主要描述action的作用，fn是Function，是这个action的具体逻辑。action执行后返回一个函数，调用这个函数就会执行action，其实就是调用fn参数。</p>
<p>个人感觉在mobx中，action的作用更多的是用来注释当前的操作……使用的时候在name参数上写操作是干啥的，能够快速的了解action的意图。当然如果安装了devtools，action还能输出调试信息。</p>
<p>需要注意的是，如果使用<a href="https://github.com/mobxjs/mobx/blob/gh-pages/docs/refguide/api.md#usestrict" target="_blank" rel="external">useStrict</a>api开启了严格模式，就必须通过action才能修改状态(state)，直接修改值会报错。</p>
<p>举个🌰</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;observable, useStrict, action, computed, autorun&#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"></div><div class="line">useStrict(<span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> numbers = observable([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div><div class="line"><span class="keyword">let</span> sum = computed(<span class="function"><span class="params">()</span> =&gt;</span> numbers.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>));</div><div class="line"></div><div class="line"><span class="keyword">let</span> disposer1 = autorun(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`sum:<span class="subst">$&#123;sum.get()&#125;</span>`</span>));</div><div class="line"><span class="comment">// sum:6</span></div><div class="line"><span class="keyword">let</span> disposer2 = autorun(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`length:<span class="subst">$&#123;numbers.length&#125;</span>`</span>));</div><div class="line"><span class="comment">// length:3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pushNumber = action(<span class="string">'push number'</span>,()=&gt;&#123;</div><div class="line">	numbers.push(<span class="number">4</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">pushNumber(<span class="number">4</span>)</div><div class="line"><span class="comment">// sum:10</span></div><div class="line"><span class="comment">// length:4</span></div><div class="line"></div><div class="line">numbers.push(<span class="number">5</span>)</div><div class="line"><span class="comment">// Uncaught Error: [mobx] Invariant failed: It is not allowed to create</span></div><div class="line"><span class="comment">// or change state outside an `action` when MobX is in strict mode. Wrap</span></div><div class="line"><span class="comment">// the current method in `action` if this state change is intended.</span></div></pre></td></tr></table></figure>
<p>另外，action在执行时是可以接受参数的，而且action在执行后还会返回fn参数的返回值，这一点文档里没有明显的说明，害的我翻源码才翻出来的……┑(￣Д ￣)┍……话说mobx是用typescript写的呢。虽然ts最近很火，而且功能也确实挺实用的，但是我对java一样死板的语法却怎么都都爱不起来……所以更看好<a href="https://www.zhihu.com/question/31415286/answer/58022648" target="_blank" rel="external">WebAssembly</a>一些……</p>
<p>扯远了扯远了……那么我们再把上面那个例子修改一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;observable, useStrict, action, computed, autorun&#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"></div><div class="line">useStrict(<span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> numbers = observable([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div><div class="line"><span class="keyword">let</span> sum = computed(<span class="function"><span class="params">()</span> =&gt;</span> numbers.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>));</div><div class="line"><span class="comment">// sum:6</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> disposer = autorun(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`sum:<span class="subst">$&#123;sum.get()&#125;</span>`</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> pushNumber = action(<span class="string">'push number'</span>,(number)=&gt;numbers.push(number))</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`length:<span class="subst">$&#123;pushNumber(<span class="number">6</span>)&#125;</span>`</span>)</div><div class="line"><span class="comment">// sum:12</span></div><div class="line"><span class="comment">// length:4</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`length:<span class="subst">$&#123;pushNumber(<span class="number">7</span>)&#125;</span>`</span>)</div><div class="line"><span class="comment">// sum:19</span></div><div class="line"><span class="comment">// length:5</span></div></pre></td></tr></table></figure>
<p>从上面的例子可以看到，传入pushNumber的参数最后被传入了action的fn中，然后pushNumber返回了push的返回值。</p>
<p>官方文档中的一个例子也能看到调用action返回函数时传递参数的应用场景：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@action createRandomContact() &#123;</div><div class="line">	<span class="keyword">this</span>.pendingRequestCount++;</div><div class="line">	superagent</div><div class="line">		.get(<span class="string">'https://randomuser.me/api/'</span>)</div><div class="line">		.set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</div><div class="line">		.end(action(<span class="string">"createRandomContact-callback"</span>, (error, results) =&gt; &#123;</div><div class="line">			<span class="keyword">if</span> (error)</div><div class="line">				<span class="built_in">console</span>.error(error);</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(results.text).results[<span class="number">0</span>];</div><div class="line">				<span class="keyword">const</span> contact = <span class="keyword">new</span> Contact(<span class="keyword">this</span>, data.dob, data.name, data.login.username, data.picture)</div><div class="line">				contact.addTag(<span class="string">'random-user'</span>);</div><div class="line">				<span class="keyword">this</span>.contacts.push(contact);</div><div class="line">				<span class="keyword">this</span>.pendingRequestCount--;</div><div class="line">			&#125;</div><div class="line">		&#125;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个🌰中可以看到，action的返回值作为superagent.end的回调，接收error和results两个参数，最后传入fn进行处理。这个例子也引出了另一个问题，action中如何处理一步操作。</p>
<h2 id="async-action-和-runInAction"><a href="#async-action-和-runInAction" class="headerlink" title="async action 和 runInAction"></a>async action 和 runInAction</h2><p>action只能影响正在运行的函数，而无法影响当前函数调用的异步操作。也就是说如果fn中有setTimeout，promise.then，async函数，并且这些函数的回调里对state进行了修改，那么这些回调也应该用action包装一下（在非严格模式下，action和直接修改state值都能生效，所以并不会出现异常，如果是严格模式下就会报错）。</p>
<p>还有，如果要使用<code>async</code>函数作为action，不能直接用action包装<code>async</code>函数，这里需要使用一个tricky，将一个<code>async</code>匿名函数赋值给一个变量或者属性再做包装。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@action updateDocument = <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> fetchDataFromUrl();</div><div class="line">    <span class="comment">/* required in strict mode to be allowed to update state: */</span></div><div class="line">    runInAction(<span class="string">"update state after fetching data"</span>, () =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.data.replace(data);</div><div class="line">        <span class="keyword">this</span>.isSaving = <span class="literal">true</span>;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子还用到了<code>runInAction</code>，它其实就是action(name,fn)()的语法糖，调用后action会立即执行，它的用法是：<code>runInAction(name?, fn, scope?)</code>，scope是fn调用时的this指向。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="http://mobxjs.github.io/mobx/refguide/action.html" target="_blank" rel="external">MobX Documentation – action</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2016/11/29/MobX-simple-entry-2/&quot;&gt;上一篇&lt;/a&gt;简单介绍了下mobx常用的几个api(observable、computed、autorun)，以及mobx-react的api(observer)。这次说说action。&lt;/p&gt;
&lt;h2 id=&quot;action&quot;&gt;&lt;a href=&quot;#action&quot; class=&quot;headerlink&quot; title=&quot;action&quot;&gt;&lt;/a&gt;action&lt;/h2&gt;&lt;p&gt;用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;action(fn)&lt;/li&gt;
&lt;li&gt;action(name, fn)&lt;/li&gt;
&lt;li&gt;@action classMethod&lt;/li&gt;
&lt;li&gt;@action(name) classMethod&lt;/li&gt;
&lt;li&gt;@action boundClassMethod = (args) =&amp;gt; { body }&lt;/li&gt;
&lt;li&gt;@action(name) boundClassMethod = (args) =&amp;gt; { body }&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前的例子里使用了回调的方式来触发响应，mobx其实也支持使用flux的方式来出发响应，并且在2.2版本提供了action的功能。&lt;/p&gt;
&lt;p&gt;action是一个工厂函数，可以接受name和fn两个参数，name是String，主要描述action的作用，fn是Function，是这个action的具体逻辑。action执行后返回一个函数，调用这个函数就会执行action，其实就是调用fn参数。&lt;/p&gt;
&lt;p&gt;个人感觉在mobx中，action的作用更多的是用来注释当前的操作……使用的时候在name参数上写操作是干啥的，能够快速的了解action的意图。当然如果安装了devtools，action还能输出调试信息。&lt;/p&gt;
&lt;p&gt;需要注意的是，如果使用&lt;a href=&quot;https://github.com/mobxjs/mobx/blob/gh-pages/docs/refguide/api.md#usestrict&quot;&gt;useStrict&lt;/a&gt;api开启了严格模式，就必须通过action才能修改状态(state)，直接修改值会报错。&lt;/p&gt;
&lt;p&gt;举个🌰&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React全家桶又填新成员 MobX入坑指南(1)</title>
    <link href="http://brooch.me/2016/11/23/MobX-simple-entry-1/"/>
    <id>http://brooch.me/2016/11/23/MobX-simple-entry-1/</id>
    <published>2016-11-23T14:34:10.000Z</published>
    <updated>2016-11-30T00:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>话说，吐槽被react全家桶坑的文章已经算是各大论坛上的月经贴了吧……行内样式、jsx里html和js混排、依赖太多、学习曲线陡峭……当然其中不乏抱怨redux反人类的……</p>
<p>当然，这篇文章并不是来黑react不好的，毕竟以后涨工资还得靠它呢哈哈哈(￣▽￣)……</p>
<p>今天咱们要说的是众多槽点之一，”反人类的redux”和其替代方案。<br><a id="more"></a></p>
<h2 id="redux有什么不好？"><a href="#redux有什么不好？" class="headerlink" title="redux有什么不好？"></a>redux有什么不好？</h2><p>首先，redux绝对是个优秀的库。它体小精悍，api简单优雅，扩展能力强，足以衍生出丰富的工具集和生态系统。在它出现之前，各种flux实现貌似都不能让人如意，以至于有人宁可用 backbone 甚至是 angular 和 react搭配，也不用flux……后来redux出现，解决了flux操作繁琐的问题，开始受到人们的关注，再后来作者也加入了 facebook从事react的开发，redux也顺理成章的成为了react官方推荐状态管理库。</p>
<p>但是，在真正去开发的时候，我发现状态的维护还是有些繁琐，如果你在设计阶段没有考虑周全，开发时就要不停的在action,container,reducer之前修改，穿梭，让人眼花缭乱……嗯，也没准儿是我项目不够大……</p>
<p>另外，由于redux大量使用函数式编程的思想，门槛有点高呢。当时为了理解redux里面的概念，我大概读了一周的文档……</p>
<p>按你胃（Anywhere），如果你更熟悉面向对象，羡慕mvvm框架的简单，那你真的应该体验一下mobx</p>
<h2 id="mobx是啥？"><a href="#mobx是啥？" class="headerlink" title="mobx是啥？"></a>mobx是啥？</h2><p>mobx是个新的状态管理库，响应式的，我是看了<a href="http://weibo.com/1400854834/EdqkGrQh6" target="_blank" rel="external">阮一峰的微博</a>知道的，后来查了资料发现，redux的作者在twitter推荐了这个库，还是作为redex的替代品……</p>
<p>那么废话少说，让我们现在看看mobx怎么用吧</p>
<h2 id="api简单介绍"><a href="#api简单介绍" class="headerlink" title="api简单介绍"></a>api简单介绍</h2><p>和redux一样，mobx是一个独立的库，不依赖于react也能自己用，它只有三个概念：观测状态，计算值和反应。这三个概念分别对应三个mobx的api：observable，computed和autorun。</p>
<p>咱们先来个最简单的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; observable, computed, autorun &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> numbers = observable([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div><div class="line"><span class="keyword">let</span> sum = computed(<span class="function"><span class="params">()</span> =&gt;</span> numbers.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>));</div><div class="line"></div><div class="line"><span class="keyword">let</span> disposer1 = autorun(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`sum:<span class="subst">$&#123;sum.get()&#125;</span>`</span>));</div><div class="line"><span class="keyword">let</span> disposer2 = autorun(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`length:<span class="subst">$&#123;numbers.length&#125;</span>`</span>));</div><div class="line"><span class="comment">// sum:6</span></div><div class="line"><span class="comment">// length:3</span></div><div class="line"></div><div class="line">numbers.push(<span class="number">4</span>);</div><div class="line"><span class="comment">// sum:10</span></div><div class="line"><span class="comment">// length:4</span></div><div class="line"></div><div class="line">disposer2();</div><div class="line">numbers.push(<span class="number">5</span>);</div><div class="line"><span class="comment">// sum:15</span></div></pre></td></tr></table></figure>
<p>这个例子中，observable用来绑定数据；computed用来绑定计算方法；autorun用来注册数据变化时响应的方法，返回的函数用来取消响应。</p>
<p>下面我们试着来写一个TodoList</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; observable, computed, autorun &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</div><div class="line">    id = <span class="built_in">Math</span>.random();</div><div class="line">    @observable content;</div><div class="line">    @observable finished = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">constructor</span>(content) &#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> </span>&#123;</div><div class="line">    @observable todos = [];</div><div class="line">    @computed get todoListString() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.finished).map(<span class="function">(<span class="params">todo, i</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>. <span class="subst">$&#123;todo.content&#125;</span>`</span>).join(<span class="string">'\n'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> TodoList();</div><div class="line"></div><div class="line">store.todos.push(</div><div class="line">    <span class="keyword">new</span> Todo(<span class="string">"task1"</span>),</div><div class="line">    <span class="keyword">new</span> Todo(<span class="string">"task2"</span>),</div><div class="line">    <span class="keyword">new</span> Todo(<span class="string">"task3"</span>)</div><div class="line">);</div><div class="line">autorun(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.todoListString))</div><div class="line"></div><div class="line">store.todos[<span class="number">2</span>].finished = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<p>从上面的例子可以看到，针对类的属性，可以使用修饰器@observable、@computed来进行绑定，修饰器是ES7的一个提案，目前Babel已经支持。详细的介绍可以看<a href="http://es6.ruanyifeng.com/#docs/decorator" target="_blank" rel="external">ECMAScript 6 入门中修饰器一章</a></p>
<p>如果不想用修饰器，也可以使用extendObservable函数，跟修饰器的功能是一样的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; extendObservable, autorun &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</div><div class="line">    id = <span class="built_in">Math</span>.random();</div><div class="line">    <span class="keyword">constructor</span>(content) &#123;</div><div class="line">		extendObservable(<span class="keyword">this</span>, &#123;</div><div class="line">			<span class="attr">content</span>: content,</div><div class="line">			<span class="attr">finished</span>: <span class="literal">false</span></div><div class="line">		&#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		extendObservable(<span class="keyword">this</span>, &#123;</div><div class="line">			<span class="attr">todos</span>: [],</div><div class="line">			<span class="attr">todoListString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.finished).map(<span class="function">(<span class="params">todo, i</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>. <span class="subst">$&#123;todo.content&#125;</span>`</span>).join(<span class="string">'\n'</span>);</div><div class="line">		    &#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> TodoList();</div><div class="line"></div><div class="line">store.todos.push(</div><div class="line">    <span class="keyword">new</span> Todo(<span class="string">"task1"</span>),</div><div class="line">    <span class="keyword">new</span> Todo(<span class="string">"task2"</span>),</div><div class="line">    <span class="keyword">new</span> Todo(<span class="string">"task3"</span>)</div><div class="line">);</div><div class="line">autorun(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.todoListString))</div><div class="line"></div><div class="line">store.todos[<span class="number">2</span>].finished = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<h2 id="mobx-react"><a href="#mobx-react" class="headerlink" title="mobx-react"></a>mobx-react</h2><p>在跟react配合时，mobx提供了mobx-react包，使用@observer装饰器或者observer函数，可以自动将react组建的render方法包装到mobx.autorun里面。还是以前面的TodoList为例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; observable, computed &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> mobxReact;</div><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> React;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</div><div class="line">    id = <span class="built_in">Math</span>.random();</div><div class="line">    @observable content;</div><div class="line">    @observable finished = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">constructor</span>(content) &#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">    finish() &#123;</div><div class="line">      <span class="keyword">this</span>.finished = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> </span>&#123;</div><div class="line">    @observable todos = [];</div><div class="line">    @computed get unFinishedList() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.finished);</div><div class="line">	&#125;</div><div class="line">    @computed get finishedList() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.finished);</div><div class="line">    &#125;</div><div class="line">	addTodo(content) &#123;</div><div class="line">	  	<span class="keyword">if</span> (content)&#123;</div><div class="line">			<span class="keyword">this</span>.todos.push(<span class="keyword">new</span> Todo(content))</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@observer</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoListView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">		<span class="keyword">const</span> &#123; todoList &#125; = <span class="keyword">this</span>.props;</div><div class="line">		<span class="keyword">let</span> onChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">	    	<span class="keyword">this</span>.value = event.target.value</div><div class="line">	    &#125;</div><div class="line">		<span class="keyword">let</span> onClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123; todoList.addTodo(<span class="keyword">this</span>.value) &#125;</div><div class="line">        <span class="keyword">return</span> (&lt;div&gt;</div><div class="line">			&lt;h2&gt;添加任务&lt;/h2&gt;</div><div class="line">			&lt;input type="text" value=&#123; this.value &#125; onChange=&#123; onChange &#125;/&gt;</div><div class="line">			&lt;button type="button" onClick=&#123; onClick &#125;&gt;添加&lt;/button&gt;</div><div class="line">			&lt;h2&gt;未完成任务&lt;/h2&gt;</div><div class="line">            &lt;ol&gt;</div><div class="line">                &#123;todoList.unFinishedList.slice(0).map((todo,index) =&gt;</div><div class="line">                    &lt;TodoView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;</div><div class="line">                )&#125;</div><div class="line">            &lt;/ol&gt;</div><div class="line">            Tasks left: &#123;todoList.unFinishedList.length&#125;</div><div class="line">			&lt;h2&gt;已完成任务&lt;/h2&gt;</div><div class="line">			&lt;ol&gt;</div><div class="line">                &#123;todoList.finishedList.map((todo) =&gt;</div><div class="line">                    &lt;FinishedView todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;</div><div class="line">                )&#125;</div><div class="line">            &lt;/ol&gt;</div><div class="line">        &lt;/div&gt;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const TodoView = observer((props) =&gt;</div><div class="line">&#123;</div><div class="line">		let &#123; todo &#125; = props;</div><div class="line">    return (&lt;li&gt;</div><div class="line">            &lt;input</div><div class="line">                type="checkbox"</div><div class="line">                checked=&#123;todo.finished&#125;</div><div class="line">                onClick=&#123;todo.finish.bind(todo)&#125;</div><div class="line">                /&gt;&#123;todo.content&#125;</div><div class="line">        &lt;/li&gt;)</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line">@observer</div><div class="line">class FinishedView extends Component&#123;</div><div class="line">	render() &#123;</div><div class="line">		let &#123; todo &#125; = this.props;</div><div class="line">	  return (&lt;li&gt;</div><div class="line">	        &lt;del&gt;&#123;todo.content&#125;&lt;/del&gt;</div><div class="line">	    &lt;/li&gt;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = new TodoList();</div><div class="line"></div><div class="line">React.render(&lt;TodoListView todoList=&#123;store&#125; /&gt;, document.body);</div><div class="line"></div><div class="line">store.todos.push(</div><div class="line">    new Todo("Get Coffee"),</div><div class="line">    new Todo("Write simpler code")</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在上面的例子里可以看到，使用mobx-react的不同点只是在编写组件类时observer包装了一下，其他的跟不使用mobx-react没什么区别。另外，如果在stroe里加入方法，就可以做到类似action一样的动作，使用上比redux要简单很多。当然这也引出一个问题，就是当子组件状态变化影响到父组件的状态，如何通知父组件。redux用类似dbus的设计解决了这个问题，mobx怎么解决，我还没有看到，后续看到了再做补充。</p>
<h2 id="简单的总结"><a href="#简单的总结" class="headerlink" title="简单的总结"></a>简单的总结</h2><p>怎么说呢，总感觉mobx的功能和vue好像……￣ω￣=……特别是computed……这种设计对于写惯了mvc的人来说会感觉非常亲切，stroe其实就是相当于平时常写的model嘛，概念很容易理解。难度上，个人感觉不高，除了一些绑定后的数据需要调用set、get方法，api也不多。</p>
<p>其实mobx还有很多的功能没有介绍到，而且在网上资料也很少，如果有时间的话，打算试着翻译mobx的文档。更多的例子，后续再做详细的补充，今天就先到这里吧，我实在是写不动了……_(:3 」∠)_</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="http://mobxjs.github.io/mobx/index.html" target="_blank" rel="external">MobX Documentation</a></li>
<li><a href="http://frontendinsights.com/short-introduction-to-mobx/" target="_blank" rel="external">A short introduction to MobX</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说，吐槽被react全家桶坑的文章已经算是各大论坛上的月经贴了吧……行内样式、jsx里html和js混排、依赖太多、学习曲线陡峭……当然其中不乏抱怨redux反人类的……&lt;/p&gt;
&lt;p&gt;当然，这篇文章并不是来黑react不好的，毕竟以后涨工资还得靠它呢哈哈哈(￣▽￣)……&lt;/p&gt;
&lt;p&gt;今天咱们要说的是众多槽点之一，”反人类的redux”和其替代方案。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浮点数计算为什么不精确</title>
    <link href="http://brooch.me/2016/11/17/%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%B2%BE%E7%A1%AE/"/>
    <id>http://brooch.me/2016/11/17/浮点数计算为什么不精确/</id>
    <published>2016-11-17T02:22:47.000Z</published>
    <updated>2016-11-17T14:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>其实这篇博客早就写好了，只不过之前懒一直没有整理完善……哈哈哈…… _(:3 」∠)_</p>
</blockquote>
<p>前几几几几天，在微博上看到<a href="http://weibo.com/u/1778942741" target="_blank" rel="external">寇胖</a>转了一个关于浮点数计算的<a href="http://weibo.com/1996814695/DC0c6iAVD" target="_blank" rel="external">微博</a>，里面的内容不太准确。正好之前我调查过一些关于浮点数的资料，在这里好好掰吃掰吃，做个记录~(￣▽￣)~*</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>先说结论，嫌又臭又长的看到这里就可以了:</p>
<ul>
<li>浮点数计算不精确并不是bug，因为标准就是这样的。</li>
<li>原因简单来说是这样：2进制的小数无法精确的表达10进制小数，计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差。</li>
<li>解决方法：对于需要精确结果的场景，别直接使用浮点数进行计算。现阶段可以使用<a href="http://mikemcl.github.io/big.js/" target="_blank" rel="external">big.js</a>解决，等以后ecmascript实现decimal了，就可以使用decimal类型计算了。</li>
</ul>
<a id="more"></a>
<h2 id="小数算不准，真的是js的锅吗？"><a href="#小数算不准，真的是js的锅吗？" class="headerlink" title="小数算不准，真的是js的锅吗？"></a>小数算不准，真的是js的锅吗？</h2><p>说到这个问题，其实这是两个锅，js计算不准确不止会出现在小数的计算上，还会出现在大整数计算上，可以运行下面两行代码查看问题的具体表现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>; <span class="comment">// false</span></div><div class="line"><span class="number">9999999999999999</span> + <span class="number">2</span> == <span class="number">10000000000000001</span>; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>当然，这个锅肯定不是javascript背。事实上，使用了IEEE 754 标准来存储浮点类型的任何编程语言（C/C++/C#/Java 等等）都存在精度丢失问题。</p>
<p>例如在 Java 中，要想算准浮点数，同样不能直接计算，需要使用 BigDecimal 类来进行相应的处理。</p>
<p>当然，javascript也并没有落后于其他语言。ECMAScript 规范中已有 <a href="http://wiki.ecmascript.org/doku.php?id=proposals:decimal" target="_blank" rel="external">decimal </a>类型的提案了，但目前尚未被正式采纳。</p>
<h2 id="为什么不算准？"><a href="#为什么不算准？" class="headerlink" title="为什么不算准？"></a>为什么不算准？</h2><p>要解释这个问题，就得从10进制与2进制的转换说起。</p>
<p>众所周知，计算机做运算是使用二级制的。所以其实咱们在程序中做10进制运算，都是要转换为2进制再进行计算的。10进制整数转换为2进制的方法可能大家都知道：</p>
<blockquote>
<p><strong>除以2，商继续除以2，得到0为止，将余数逆序排列</strong><br>例如：<br>22 / 2     11 余 0<br>11 / 2     5  余 1<br>5  / 2     2  余 1<br>2  / 2     1  余 0<br>1  / 2     0  余 1<br>所以22的的二进制是10110</p>
</blockquote>
<p>那10进制小数转换为2进制的方法呢？</p>
<blockquote>
<p><strong>乘以2，取整，小数部分继续乘以2，取整，得到小数部分0为止，将整数顺序排列</strong><br>0.8125 x 2     1.625 取 1<br>0.625  x 2     1.25  取 1<br>0.25   x 2     0.5   取 0<br>0.5    x 2     1.0   取 1<br>所以0.8125的二进制是0.1101</p>
</blockquote>
<p>那么问题就来了，比如你想计算10进制0.2的2进制：</p>
<blockquote>
<p>0.2 x 2     0.4<br>0.4 x 2     0.8<br>0.8 x 2     1.6<br>0.6 x 2     1.2<br>0.2 x 2     0.4<br>……</p>
</blockquote>
<p>发现了吗？它乘不尽，是无限循环的……</p>
<p>而 javascript 使用64位双精度浮点数存储数字，类似科学计数法，其中1位用来存储符号，11位用来存储指数值，52位用来存储尾数值（真正的数字），当计算的结果的二进制有效位数超过 52 位时，就会出现精度丢失的问题……</p>
<p>大整数计算的原因也是一样，有效位数超过 52位时，精度就会丢失</p>
<p>这就解释了下面这种情况：</p>
<blockquote>
<p>十进制 0.1 的二进制为 0.0 0011 0011 0011 … （循环 0011）<br>十进制 0.2 的二进制为 0.0011 0011 0011 … （循环 0011）</p>
<p>0.1 + 0.2 相加可表示为：<br>   e = -4; m = 1.10011001100…1100（52 位）<br> + e = -3; m = 1.10011001100…1100（52 位）<br>-——————————————–<br>   e = -3; m = 0.11001100110…0110<br> + e = -3; m = 1.10011001100…1100<br>-——————————————–<br>   e = -3; m = 10.01100110011…001<br>-——————————————–<br> = 0.01001100110011…001<br> = 0.30000000000000004（十进制）</p>
</blockquote>
<p>但是0.05和0.2用二进制都无法精确表达，0.05 + 0.2 却不会计算错误，0.2 + 0.7 会计算错误，1.2 +1.7 又不会，这又是为什么？</p>
<p>具体的原因我并没有找到相关的资料……</p>
<p>貌似这和 IEEE 754 的舍入模式有关系。</p>
<p>IEEE 754 采用的是最近舍入模式，和我们最熟悉的是四舍五入模式有些许不同，也是比较容易引起误解的地方之一。举例比较如下：</p>
<blockquote>
<p>最近舍入模式：Round(0.5) = 0; Round(1.5) = 2; Round(2.5) = 2;</p>
<p>四舍五入模式：Round(0.5) = 1; Round(1.5) = 2; Round(2.5) = 3;</p>
</blockquote>
<p>既当有两个最接近的可表示的值时首选“偶数”值。</p>
<p>具体的原因我会再调查调查，有了新的资料再补充到这里。</p>
<h2 id="如何解决这个问题？"><a href="#如何解决这个问题？" class="headerlink" title="如何解决这个问题？"></a>如何解决这个问题？</h2><p>当然，问题的解决方法其实也已经有前人跟咱们铺好路了，毕竟这个在问题在编程领域里其实是个挺常见的问题……</p>
<p>网上的解决办法五花八门，总的原则就是逐位运算。我推荐 github 上  <a href="https://github.com/MikeMcl" target="_blank" rel="external">MikeMcl</a> 开发的 <a href="http://mikemcl.github.io/big.js/" target="_blank" rel="external">big.js</a> 。这个库不尽支持基础运算，而且还支持各种函数运算和比较运算，相当全面呢。实现上，是将数字按照科学计数法解析成一个包含正负符号、指数、尾数的对象，再做运算。例子就不写了，它的文档很全，而且简单易懂。</p>
<p>有趣的是，这个作者除了 big.js 还开发了另两个计算库 bignumber.js 和 decimal.js，三个库的侧重点不一样，关于这三个的对比，有兴趣的话可以看作者自己写的wiki <a href="https://github.com/MikeMcl/big.js/wiki" target="_blank" rel="external">What is the difference between big.js, bignumber.js and decimal.js?</a></p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章:"></a>相关文章:</h2><ol>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513140&amp;idx=1&amp;sn=565517e977ac56904305a4a9f9d65012#rd" target="_blank" rel="external">浮点数为什么不精确？</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/maplejan/p/3893545.html" target="_blank" rel="external">JavaScript超大整数加法</a></p>
</li>
<li><p><a href="http://demon.tw/copy-paste/javascript-precision.html" target="_blank" rel="external">JavaScript 中小数和大整数的精度丢失</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/bossin/archive/2007/04/08/704567.html" target="_blank" rel="external">IEEE 754 浮点数的表示精度探讨</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="external">IEEE 754</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实这篇博客早就写好了，只不过之前懒一直没有整理完善……哈哈哈…… _(:3 」∠)_&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前几几几几天，在微博上看到&lt;a href=&quot;http://weibo.com/u/1778942741&quot;&gt;寇胖&lt;/a&gt;转了一个关于浮点数计算的&lt;a href=&quot;http://weibo.com/1996814695/DC0c6iAVD&quot;&gt;微博&lt;/a&gt;，里面的内容不太准确。正好之前我调查过一些关于浮点数的资料，在这里好好掰吃掰吃，做个记录~(￣▽￣)~*&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;先说结论，嫌又臭又长的看到这里就可以了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浮点数计算不精确并不是bug，因为标准就是这样的。&lt;/li&gt;
&lt;li&gt;原因简单来说是这样：2进制的小数无法精确的表达10进制小数，计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差。&lt;/li&gt;
&lt;li&gt;解决方法：对于需要精确结果的场景，别直接使用浮点数进行计算。现阶段可以使用&lt;a href=&quot;http://mikemcl.github.io/big.js/&quot;&gt;big.js&lt;/a&gt;解决，等以后ecmascript实现decimal了，就可以使用decimal类型计算了。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="http://brooch.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="javascript" scheme="http://brooch.me/tags/javascript/"/>
    
      <category term="floating point" scheme="http://brooch.me/tags/floating-point/"/>
    
      <category term="big decimal" scheme="http://brooch.me/tags/big-decimal/"/>
    
      <category term="IEEE 754" scheme="http://brooch.me/tags/IEEE-754/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="http://brooch.me/2016/11/16/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://brooch.me/2016/11/16/新的开始/</id>
    <published>2016-11-16T14:23:33.000Z</published>
    <updated>2016-11-16T16:36:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>哈，距离上次写博客刚好一年了呢，话说我还真是懒呢…… _(:3 」∠)_</p>
<p>这里不得不感叹下榜样的力量是无穷的。要不是<a href="http://testudy.cc/" target="_blank" rel="external">继伟</a>发起每周写博客的活动，估计我现在还在床上躺着呢……读好书，交高人，此言非虚呀~</p>
<p>总之，希望这是个新的开始，期待能遇见更好的自己~(｡･ω･｡)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈，距离上次写博客刚好一年了呢，话说我还真是懒呢…… _(:3 」∠)_&lt;/p&gt;
&lt;p&gt;这里不得不感叹下榜样的力量是无穷的。要不是&lt;a href=&quot;http://testudy.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;继伟&lt;/a&gt;发起每周写博
    
    </summary>
    
      <category term="感想" scheme="http://brooch.me/categories/%E6%84%9F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Capitan之后JetBrains的产品都不能用了</title>
    <link href="http://brooch.me/2015/11/21/Capitan%E4%B9%8B%E5%90%8EJetBrains%E7%9A%84%E4%BA%A7%E5%93%81%E9%83%BD%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%86/"/>
    <id>http://brooch.me/2015/11/21/Capitan之后JetBrains的产品都不能用了/</id>
    <published>2015-11-21T04:06:24.000Z</published>
    <updated>2016-11-16T16:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>更新了osx升级10.11 EL Capitan之后发现有好多坑啊……限制超多而且JetBrains的产品都不能用了……</p>
<p>查了一溜够貌似是之前安装的一些系统软件都被清除了，而且还需要接触rootless模式，总之先附上搜索到的资料链接吧</p>
<p><a href="http://blog.euphonictech.com/entry/2014/11/12/192856" target="_blank" rel="external">Intellij IDEAやAppCodeが起動しない場合に考えられること</a>（需翻墙）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新了osx升级10.11 EL Capitan之后发现有好多坑啊……限制超多而且JetBrains的产品都不能用了……&lt;/p&gt;
&lt;p&gt;查了一溜够貌似是之前安装的一些系统软件都被清除了，而且还需要接触rootless模式，总之先附上搜索到的资料链接吧&lt;/p&gt;
&lt;p&gt;&lt;a h
    
    </summary>
    
      <category term="随手一记" scheme="http://brooch.me/categories/%E9%9A%8F%E6%89%8B%E4%B8%80%E8%AE%B0/"/>
    
    
      <category term="osx" scheme="http://brooch.me/tags/osx/"/>
    
  </entry>
  
  <entry>
    <title>邮件链接中加入参数可以给要发送的邮件添加标题和内容，第一次发现唉</title>
    <link href="http://brooch.me/2015/10/21/%E9%82%AE%E4%BB%B6%E9%93%BE%E6%8E%A5%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%8F%82%E6%95%B0%E5%8F%AF%E4%BB%A5%E7%BB%99%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E9%82%AE%E4%BB%B6%E6%B7%BB%E5%8A%A0%E6%A0%87%E9%A2%98%E5%92%8C%E5%86%85%E5%AE%B9%EF%BC%8C%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%91%E7%8E%B0%E5%94%89/"/>
    <id>http://brooch.me/2015/10/21/邮件链接中加入参数可以给要发送的邮件添加标题和内容，第一次发现唉/</id>
    <published>2015-10-21T03:51:34.000Z</published>
    <updated>2016-11-16T16:36:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>a标签的href属性值可以是mailto协议的地址，这个比较常见，但是能加参数设置邮件内容我还是第一次见呢。</p>
<p>示例：</p>
<p>mailto:xxx@xxx.com?Subject=标题&amp;Body=正文</p>
<p>貌似按照get方式加上参数就行了，Subject代表标题，Body代表正文</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;a标签的href属性值可以是mailto协议的地址，这个比较常见，但是能加参数设置邮件内容我还是第一次见呢。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;mailto:xxx@xxx.com?Subject=标题&amp;amp;Body=正文&lt;/p&gt;
&lt;p&gt;貌似按照get方式加上参数就行
    
    </summary>
    
      <category term="随手一记" scheme="http://brooch.me/categories/%E9%9A%8F%E6%89%8B%E4%B8%80%E8%AE%B0/"/>
    
    
      <category term="html" scheme="http://brooch.me/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>总结下hexo搭建的过程</title>
    <link href="http://brooch.me/2015/10/16/%E6%80%BB%E7%BB%93%E4%B8%8Bhexo%E6%90%AD%E5%BB%BA%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://brooch.me/2015/10/16/总结下hexo搭建的过程/</id>
    <published>2015-10-16T14:23:22.000Z</published>
    <updated>2016-11-16T16:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2016-11-16 UPDATE:</strong> 距离写下这篇博客已经过了一年了，hexo在这一年里发展的挺快。现在hexo的文档已经齐全，整个工作流程也相当顺畅了。</p>
<p>安装过程中如果 node-gyp 报 error，可以尝试升级xcode，并安装xcode-select 升级 CLT。</p>
<p>下面附上几篇比较好的文章，建站过程中遇到问题可以查阅一下。</p>
<p><a href="http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="external">Hexo常见问题解决方案</a><br>收集了很多使用hexo过程中的常见问题</p>
<a id="more"></a>
<p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a><br>文章的内容很全，不止写了如何使用hexo，如何使用github，如何找图床等问题也都有描述，如果是使用github pages搭建博客的话，看这篇就够用了</p>
<p><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a><br>和上一篇文章一样，这篇文章的内容也很全面，除了博客的搭建过程，如何在购买域名和服务器也有描述，只不过图片貌似都已经失效了……有些遗憾呢……</p>
<p><a href="http://segmentfault.com/a/1190000003776905" target="_blank" rel="external">翻译自GitHub Pages的Help页面（仍在更新中）</a><br>github pages的help页面的翻译，对于英语苦手的人来说，应该会很有帮助吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;2016-11-16 UPDATE:&lt;/strong&gt; 距离写下这篇博客已经过了一年了，hexo在这一年里发展的挺快。现在hexo的文档已经齐全，整个工作流程也相当顺畅了。&lt;/p&gt;
&lt;p&gt;安装过程中如果 node-gyp 报 error，可以尝试升级xcode，并安装xcode-select 升级 CLT。&lt;/p&gt;
&lt;p&gt;下面附上几篇比较好的文章，建站过程中遇到问题可以查阅一下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&quot;&gt;Hexo常见问题解决方案&lt;/a&gt;&lt;br&gt;收集了很多使用hexo过程中的常见问题&lt;/p&gt;
    
    </summary>
    
      <category term="随手一记" scheme="http://brooch.me/categories/%E9%9A%8F%E6%89%8B%E4%B8%80%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://brooch.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>总结一下升级OS X El Capitan后brew遇到的问题</title>
    <link href="http://brooch.me/2015/10/15/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E5%8D%87%E7%BA%A7OS-X-El-Capitan%E5%90%8Ebrew%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://brooch.me/2015/10/15/总结一下升级OS-X-El-Capitan后brew遇到的问题/</id>
    <published>2015-10-15T14:45:31.000Z</published>
    <updated>2016-11-17T10:00:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>升级了osx之后，先是brew update的时候报错，后来用brew安装jenv的时候又提示说需要root权限</p>
<blockquote>
<p>Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.<br>Error: Failure while executing: /usr/bin/otool -L /usr/bin/install_name_tool</p>
</blockquote>
<p>但是sudo brew install又报错</p>
<blockquote>
<p>Error: Cowardly refusing to <code>sudo brew install</code><br>You can use brew with sudo, but only if the brew executable is owned by root.<br>However, this is both not recommended and completely unsupported so do so at your own risk.</p>
</blockquote>
<p>搜了下貌似是新版osx的问题，需要进行权限设置，用chown命令设置一下就好了</p>
<p>以下是一些参考资料</p>
<p><a href="http://digitizor.com/2014/06/29/fix-cowardly-refusing-sudo-error-brew/" target="_blank" rel="external">How To Fix Cowardly Refusing to Sudo error in Brew – Mac OS X</a></p>
<p><a href="https://github.com/Homebrew/homebrew/issues/41665" target="_blank" rel="external">Failed <code>brew update</code> on El Capitan (OS X 10.11) Beta</a></p>
<p><a href="http://gotohayato.com/content/69" target="_blank" rel="external">Mac OS X El Capitan にアップデートした後に brew update が動かない場合の対処方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级了osx之后，先是brew update的时候报错，后来用brew安装jenv的时候又提示说需要root权限&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Agreeing to the Xcode/iOS license requires admin privileges,
    
    </summary>
    
      <category term="随手一记" scheme="http://brooch.me/categories/%E9%9A%8F%E6%89%8B%E4%B8%80%E8%AE%B0/"/>
    
    
      <category term="osx" scheme="http://brooch.me/tags/osx/"/>
    
      <category term="brew" scheme="http://brooch.me/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>啊，我的第一次</title>
    <link href="http://brooch.me/2015/10/14/first-love/"/>
    <id>http://brooch.me/2015/10/14/first-love/</id>
    <published>2015-10-14T07:15:06.000Z</published>
    <updated>2016-11-16T16:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生第一篇blog，总觉得有点儿小激动呢……⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄</p>
<p>话说再过生日就30岁了呢，做程序员也是第8个年头，愈发觉得将自己的平时的一些想法、遇到的一些问题记录下来很重要，其实以前也很想，奈何我懒……</p>
<p>总之，之后会努力多写一些，也算是对自己的一种提升吧，嗯，希望我能一直坚持下去~</p>
<p>&lt;(￣▽￣)&gt; 哈哈哈……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生第一篇blog，总觉得有点儿小激动呢……⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄&lt;/p&gt;
&lt;p&gt;话说再过生日就30岁了呢，做程序员也是第8个年头，愈发觉得将自己的平时的一些想法、遇到的一些问题记录下来很重要，其实以前也很想，奈何我懒……&lt;/p&gt;
&lt;p&gt;总之，之后会努力多写一些，也
    
    </summary>
    
      <category term="感想" scheme="http://brooch.me/categories/%E6%84%9F%E6%83%B3/"/>
    
    
  </entry>
  
</feed>
